{"version":3,"sources":["page/calendar/calendar.js","page/index.js","serviceWorker.js","index.js"],"names":["Calendar","props","initiateState","showModal","dateModal","isEdit","timeFrom","moment","format","timeTo","showTimeFrom","showTimeTo","color","events","JSON","parse","localStorage","getItem","useState","state","setState","setEvents","handleInput","e","target","name","value","closeModal","useEffect","className","defaultView","dateClick","nameEvent","emailEvent","date","handleClick","plugins","dayGridPlugin","interactionPlugin","eventClick","data","find","x","id","toString","event","idEvent","title","editEvent","Modal","show","size","aria-labelledby","onHide","centered","Header","closeButton","filter","length","Body","Button","onClick","variant","Form","Group","Label","Control","type","onChange","placeholder","readOnly","time","newTime","formatted12","onDoneClick","switchToMinuteOnHourSelect","doneButton","style","textAlign","padding","Text","setItem","stringify","deleteEvent","color_chosen","map","remaining_color","includes","Math","floor","random","push","Date","getTime","addEvent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.070f3386.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport {Button, Form, Modal} from \"react-bootstrap\";\r\nimport TimeKeeper from 'react-timekeeper';\r\nimport moment from 'moment'\r\n\r\nimport '@fullcalendar/core/main.css';\r\nimport '@fullcalendar/daygrid/main.css';\r\nimport './_calendar.scss'\r\n\r\nfunction Calendar(props) {\r\n\r\n    const initiateState = {\r\n        showModal: false,\r\n        dateModal: \"\",\r\n        isEdit: false,\r\n        timeFrom: moment().format(\"hh:mm A\"),\r\n        timeTo: moment().format(\"hh:mm A\"),\r\n        showTimeFrom: false,\r\n        showTimeTo: false,\r\n        color: ['#f8b400', '#66a5ad', '#2c786c' ],\r\n        events: JSON.parse(localStorage.getItem('events') || \"[]\")\r\n    }\r\n\r\n    const [ state, setState ] = useState(initiateState)\r\n    const [ events, setEvents ] = useState(JSON.parse(localStorage.getItem('events') || \"[]\"))\r\n\r\n    useEffect(() => {\r\n    }, [])\r\n\r\n    function handleClick(e) {\r\n        setState({...state, nameEvent: \"\", timeFrom: moment().format(\"hh:mm A\"), timeTo: moment().format(\"hh:mm A\"), emailEvent: \"\", dateModal: e.date, showModal: true, isEdit: false})\r\n    }\r\n\r\n    function handleInput(e) {\r\n        setState({...state, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    function closeModal() {\r\n        setState({...state, showModal: false})\r\n    }\r\n\r\n    function deleteEvent() {\r\n        let data = state.events.filter( e => e.id.toString() !== state.idEvent.toString())\r\n        setState({ ...state, events: data})\r\n        setEvents(data)\r\n        localStorage.setItem('events', JSON.stringify(data))\r\n        closeModal()\r\n    }\r\n\r\n    function addEvent() {\r\n        const { nameEvent, emailEvent, timeFrom,  timeTo} = state\r\n        let data = state.events;\r\n        let color_chosen = (data.filter( e => { return e.date === moment(state.dateModal).format('YYYY-MM-DD')})).map(({color}) => color)\r\n        let remaining_color = state.color.filter( e => {return !(color_chosen.includes(e))})\r\n        if(state.isEdit){\r\n            data = data.map( e => {\r\n                let data = e\r\n                if(e.id.toString() === state.idEvent.toString()){\r\n                    data = {\r\n                        id: state.idEvent,\r\n                        title: nameEvent,\r\n                        date: moment(state.dateModal).format('YYYY-MM-DD'),\r\n                        color: remaining_color[Math.floor(Math.random() * remaining_color.length)],\r\n                        emailEvent,\r\n                        timeFrom,\r\n                        timeTo\r\n                    }\r\n                }\r\n                return data\r\n            })\r\n        } else {\r\n            data.push({\r\n                id: new Date().getTime(),\r\n                title: nameEvent,\r\n                date: moment(state.dateModal).format('YYYY-MM-DD'),\r\n                color: remaining_color[Math.floor(Math.random() * remaining_color.length)],\r\n                emailEvent,\r\n                timeFrom,\r\n                timeTo\r\n            })\r\n        }\r\n        setState({...state, events: data })\r\n        setEvents(data)\r\n        localStorage.setItem('events', JSON.stringify(data))\r\n        closeModal()\r\n    }\r\n\r\n    function editEvent(e) {\r\n        let data = state.events.find(x => x.id.toString() === e.event.id.toString());\r\n        setState({...state, isEdit: true, idEvent:  e.event.id.toString(), nameEvent: data.title, dateModal: data.date, timeFrom: data.timeFrom, timeTo: data.timeTo, emailEvent: data.emailEvent, showModal: true})\r\n    }\r\n\r\n    return (\r\n        <div className=\"row m__r--20 m__l--20\">\r\n            <FullCalendar\r\n                defaultView=\"dayGridMonth\"\r\n                dateClick={(e) => handleClick(e)}\r\n                plugins={[ dayGridPlugin, interactionPlugin  ]}\r\n                events={events}\r\n                eventClick={(e) => editEvent(e)}\r\n            />\r\n            <Modal\r\n                show={state.showModal}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                onHide={() => closeModal()}\r\n                className=\"modal-login__google\"\r\n                centered>\r\n                <Modal.Header closeButton>\r\n                    <h4 className=\"f__bold f__black\">{state.isEdit ? \"Edit\" : \"Set\"} Event in &nbsp;\r\n                        {moment(state.dateModal).format('MMM D, YYYY')}\r\n                    </h4>\r\n                </Modal.Header>\r\n                {\r\n                    (state.events.filter( e => { return e.date === moment(state.dateModal).format('YYYY-MM-DD')})).length === 3 ?\r\n                        <Modal.Body>\r\n                            <div className=\"row\">\r\n                               <div className=\"col-md-12\">\r\n                                   <h6>Events is full. Only 3 events in a day</h6>\r\n                               </div>\r\n                            </div>\r\n                            <hr />\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12\">\r\n                                    <Button onClick={() => closeModal()} variant=\"secondary\" className=\"btn btn-secondary pull__right\">\r\n                                        Cancel\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                        :\r\n                        <Modal.Body>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12\">\r\n                                    <Form.Group>\r\n                                        <Form.Label>\r\n                                            Name:\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"nameEvent\"\r\n                                            value={state.nameEvent}\r\n                                            onChange={e => handleInput(e)}\r\n                                            className=\"\"\r\n                                            placeholder=\"ex: Night Event\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-6\">\r\n                                    <Form.Group>\r\n                                        <Form.Label>\r\n                                            From:\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"fromEvent\"\r\n                                            readOnly\r\n                                            value={state.timeFrom}\r\n                                            onChange={e => handleInput(e)}\r\n                                            onClick={() => setState({...state, showTimeFrom: true})}\r\n                                            placeholder=\"ex: 19.00\"\r\n                                        />\r\n                                        {\r\n                                            state.showTimeFrom ?\r\n                                                <TimeKeeper\r\n                                                    time={state.timeFrom}\r\n                                                    onChange={(newTime) => setState({...state, timeFrom: newTime.formatted12})}\r\n                                                    onDoneClick={() => setState({...state, showTimeFrom: false})}\r\n                                                    switchToMinuteOnHourSelect\r\n                                                    doneButton={(newTime) => (\r\n                                                        <div\r\n                                                            style={{ textAlign: 'center', padding: '10px 0' }}\r\n                                                            onClick={() => setState({...state, showTimeFrom: false})}\r\n                                                        >\r\n                                                            Done\r\n                                                        </div>\r\n                                                    )}\r\n                                                /> : ''\r\n                                        }\r\n                                    </Form.Group>\r\n                                </div>\r\n                                <div className=\"col-md-6\">\r\n                                    <Form.Group>\r\n                                        <Form.Label>\r\n                                            To:\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"toEvent\"\r\n                                            readOnly\r\n                                            value={state.timeTo}\r\n                                            onChange={e => handleInput(e)}\r\n                                            onClick={() => setState({...state, showTimeTo: true})}\r\n                                            placeholder=\"ex: 23.00\"\r\n                                        />\r\n                                        {\r\n                                            state.showTimeTo ?\r\n                                                <TimeKeeper\r\n                                                    time={state.timeFrom}\r\n                                                    onChange={(newTime) => setState({...state, timeTo: newTime.formatted12})}\r\n                                                    onDoneClick={() => setState({...state, showTimeTo: false})}\r\n                                                    switchToMinuteOnHourSelect\r\n                                                    doneButton={(newTime) => (\r\n                                                        <div\r\n                                                            style={{ textAlign: 'center', padding: '10px 0' }}\r\n                                                            onClick={() => setState({...state, showTimeTo: false})}\r\n                                                        >\r\n                                                            Done\r\n                                                        </div>\r\n                                                    )}\r\n                                                /> : ''\r\n                                        }\r\n                                    </Form.Group>\r\n                                </div>\r\n                                <div className=\"col-md-12\">\r\n                                    <Form.Group>\r\n                                        <Form.Label>\r\n                                            Email:\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            name=\"emailEvent\"\r\n                                            onChange={e => handleInput(e)}\r\n                                            value={state.emailEvent}\r\n                                            className=\"\"\r\n                                            placeholder=\"ex: jhon.due@email.com\"\r\n                                        />\r\n                                        <Form.Text>\r\n                                            For invite event to email.\r\n                                        </Form.Text>\r\n                                    </Form.Group>\r\n                                </div>\r\n                            </div>\r\n                            <hr />\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12\">\r\n                                    {\r\n                                        state.isEdit ?\r\n                                            <Button onClick={() => deleteEvent()} variant=\"danger\" className=\"btn btn-danger\">\r\n                                                Delete\r\n                                            </Button>\r\n                                            :\r\n                                            \"\"\r\n                                    }\r\n                                    <Button onClick={() => addEvent()} variant=\"success\" className=\"btn btn-success pull__right m__l--10\">\r\n                                        {state.isEdit ? \"Update\" : \"Submit\"}\r\n                                    </Button>\r\n                                    <Button onClick={() => closeModal()} variant=\"secondary\" className=\"btn btn-secondary pull__right\">\r\n                                        Cancel\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                }\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendar;\r\n","import React from 'react';\r\nimport Calendar from \"./calendar/calendar\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App bc--cream\">\r\n                <div className=\"row header m--0 p--0 bc--yellow c--white header\">\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"col-md-10 offset-1\">\r\n                            <h3 className=\"p--20 brand bc--green-dark c--white m--0\">Calendar Event.</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            <div className=\"col-md-10 offset-1 box-container\">\r\n                <Calendar/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/_index.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './page';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}